{
  "tasks": [
    {
      "id": "8181ccbd-c3a7-42fc-89ef-5138ce0de0a2",
      "name": "配置管理系统和环境变量处理",
      "description": "实现 ConfigManager 类，支持交互模式的开关控制和所有缓存相关配置项的管理。确保配置错误不影响核心功能，提供合理的默认值和向后兼容性。",
      "notes": "这是整个系统的基础组件，必须确保异常安全性。配置项要有详细的文档说明和合理的默认值。",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:32:58.154Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加配置管理类",
          "lineStart": 1,
          "lineEnd": 20
        },
        {
          "path": ".env.example",
          "type": "TO_MODIFY",
          "description": "添加新的环境变量示例",
          "lineStart": 1,
          "lineEnd": 10
        }
      ],
      "implementationGuide": "创建 ConfigManager 类：\\n\\n```python\\nclass ConfigManager:\\n    def __init__(self):\\n        self.config = {\\n            'interactive_mode': self._get_bool('AI_CMD_INTERACTIVE_MODE', False),\\n            'confidence_threshold': self._get_float('AI_CMD_CONFIDENCE_THRESHOLD', 0.8),\\n            'auto_copy_threshold': self._get_float('AI_CMD_AUTO_COPY_THRESHOLD', 0.9),\\n            'positive_weight': self._get_float('AI_CMD_POSITIVE_WEIGHT', 0.2),\\n            'negative_weight': self._get_float('AI_CMD_NEGATIVE_WEIGHT', 0.5)\\n        }\\n        \\n    def _get_bool(self, key, default):\\n        # 安全的布尔值解析，异常时返回默认值\\n        \\n    def _get_float(self, key, default):\\n        # 安全的浮点数解析，异常时返回默认值\\n```\\n\\n重点：所有配置解析异常都要有降级处理，确保不影响主功能。",
      "verificationCriteria": "所有配置项能正确读取，异常配置不影响程序启动，配置变更能立即生效，提供配置验证和错误提示功能。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。",
      "summary": "ConfigManager 类已成功实现，包含了完整的环境变量读取、类型转换、异常处理和配置验证功能。该类支持所有 8 个缓存相关配置项，具有健壮的错误处理机制，能够安全地处理无效配置值并提供有意义的警告信息。通过测试验证，配置系统工作正常，为后续的缓存和数据库功能提供了可靠的配置基础。",
      "completedAt": "2025-07-31T18:32:58.152Z"
    },
    {
      "id": "cb4eb872-85cf-444b-817a-3dfa1017a63c",
      "name": "数据库 Schema 设计和安全初始化",
      "description": "设计扩展的数据库结构，支持缓存存储、置信度记录和反馈历史。实现安全的数据库初始化，包括路径创建、权限处理和异常降级机制。",
      "notes": "数据库初始化必须是幂等的，支持跨平台路径处理。任何数据库错误都不能影响主功能的正常使用。",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "8181ccbd-c3a7-42fc-89ef-5138ce0de0a2"
        }
      ],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:43:33.979Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加数据库管理类",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "设计数据库结构：\\n\\n```sql\\nCREATE TABLE enhanced_cache (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    query TEXT NOT NULL,\\n    query_hash TEXT NOT NULL,\\n    command TEXT NOT NULL,\\n    confidence_score REAL DEFAULT 0.0,\\n    confirmation_count INTEGER DEFAULT 0,\\n    rejection_count INTEGER DEFAULT 0,\\n    last_used DATETIME DEFAULT CURRENT_TIMESTAMP,\\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\\n    os_type TEXT,\\n    shell_type TEXT\\n);\\n\\nCREATE TABLE feedback_history (\\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\\n    query_hash TEXT NOT NULL,\\n    command TEXT NOT NULL,\\n    action TEXT NOT NULL,\\n    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP\\n);\\n```\\n\\n实现 SafeDatabaseManager 类，包含完整的错误处理和降级机制。",
      "verificationCriteria": "数据库能在各平台正确创建，表结构完整，索引生效，异常情况下能优雅降级到无缓存模式，支持数据库文件的备份和恢复。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。",
      "summary": "SafeDatabaseManager 类已成功实现，完整支持数据库 Schema 设计和安全初始化。实现了 enhanced_cache 和 feedback_history 两个核心表，包含所有必要的字段和索引。具备跨平台路径处理能力，支持自定义缓存目录，提供完整的异常处理和优雅降级机制。数据库初始化是幂等的，支持备份恢复功能，确保在任何异常情况下都不会影响主功能的正常使用。",
      "completedAt": "2025-07-31T18:43:33.977Z"
    },
    {
      "id": "25bd6907-a4f1-496e-9cad-aeca0db9513c",
      "name": "基础缓存管理器和 CRUD 操作",
      "description": "实现 CacheManager 类，提供缓存的基础增删改查操作。包括缓存条目的存储、检索、更新和删除功能，确保数据操作的原子性和一致性。",
      "notes": "这是缓存系统的核心组件，必须保证数据一致性。初版先实现基础功能，后续版本再优化性能。",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "cb4eb872-85cf-444b-817a-3dfa1017a63c"
        }
      ],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:54:29.200Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加缓存管理器",
          "lineStart": 1,
          "lineEnd": 100
        }
      ],
      "implementationGuide": "实现 CacheManager 类：\\n\\n```python\\nclass CacheManager:\\n    def __init__(self, config_manager):\\n        self.config = config_manager\\n        self.db = SafeDatabaseManager()\\n        \\n    def save_cache_entry(self, query, command, os_type=None, shell_type=None):\\n        # 保存新的缓存条目，包含基础信息\\n        \\n    def find_exact_match(self, query):\\n        # 精确匹配查询\\n        \\n    def find_similar_queries(self, query, limit=10):\\n        # 查找相似的查询（初版使用简单字符串匹配）\\n        \\n    def update_usage_stats(self, cache_id, confirmed=True):\\n        # 更新使用统计\\n        \\n    def cleanup_old_entries(self, days=90):\\n        # 清理过期条目\\n```\\n\\n重点：所有数据库操作都要有事务保护和异常处理。",
      "verificationCriteria": "能正确存储和检索缓存条目，数据操作具有事务性，异常情况下数据不会损坏，支持并发访问安全性。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。",
      "summary": "CacheManager 类已成功实现，提供了完整的缓存 CRUD 操作功能。实现了 CacheEntry 数据模型和 CacheManager 核心类，支持缓存条目的保存、精确匹配查找、使用统计更新、删除操作等基础功能。通过测试验证，能够正确存储和检索缓存条目，数据操作具有事务性保护，异常情况下不会损坏数据。修复了类型检查问题，确保代码的类型安全性。为后续的置信度计算和智能匹配功能提供了可靠的数据操作基础。",
      "completedAt": "2025-07-31T18:54:29.199Z"
    },
    {
      "id": "9db98845-47c1-4ef7-954b-d4cf3ff9d39f",
      "name": "错误处理和优雅降级机制",
      "description": "实现全面的错误处理系统，确保缓存功能的任何异常都不会影响原有的 API 调用功能。包括数据库异常、网络异常、配置异常等各种情况的处理。",
      "notes": "这是保证系统稳定性的关键组件。宁可禁用缓存也不能影响用户的正常使用。",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "25bd6907-a4f1-496e-9cad-aeca0db9513c"
        }
      ],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:23:35.132Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加错误处理机制",
          "lineStart": 1,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "实现全面的异常处理机制：\\n\\n```python\\nclass GracefulDegradationManager:\\n    def __init__(self):\\n        self.cache_available = True\\n        self.error_count = 0\\n        \\n    def with_cache_fallback(self, cache_operation, fallback_operation):\\n        try:\\n            if self.cache_available:\\n                return cache_operation()\\n        except Exception as e:\\n            self.handle_cache_error(e)\\n            return fallback_operation()\\n            \\n    def handle_cache_error(self, error):\\n        # 记录错误，决定是否禁用缓存\\n        self.error_count += 1\\n        if self.error_count > 3:\\n            self.cache_available = False\\n```\\n\\n确保所有缓存相关操作都通过这个机制保护。",
      "verificationCriteria": "各种异常情况下程序不会崩溃，能自动降级到原有功能，错误信息有适当的日志记录，支持错误恢复机制。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。"
    },
    {
      "id": "34994ad8-357f-4fd4-84ec-1b7b1cd765b8",
      "name": "简单查询匹配算法",
      "description": "实现基础的查询匹配算法，优先精确匹配，然后是简单的相似性匹配。支持查询标准化和哈希生成，为后续的智能匹配打下基础。",
      "notes": "初版使用简单算法，重点是稳定性和正确性。后续版本再优化匹配精度。",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:23:35.132Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加查询匹配算法",
          "lineStart": 1,
          "lineEnd": 80
        }
      ],
      "implementationGuide": "实现 QueryMatcher 类：\\n\\n```python\\nclass QueryMatcher:\\n    def __init__(self):\\n        # 基础同义词映射\\n        self.synonyms = {\\n            'list': ['show', 'display', 'ls'],\\n            'create': ['make', 'new', 'mkdir'],\\n            'delete': ['remove', 'rm', 'del']\\n        }\\n        \\n    def normalize_query(self, query):\\n        # 标准化：小写、去标点、同义词替换\\n        words = re.findall(r'\\\\w+', query.lower())\\n        return self.apply_synonyms(words)\\n        \\n    def calculate_similarity(self, query1, query2):\\n        # 简单的 Jaccard 相似度\\n        words1 = set(self.normalize_query(query1))\\n        words2 = set(self.normalize_query(query2))\\n        intersection = words1 & words2\\n        union = words1 | words2\\n        return len(intersection) / len(union) if union else 0\\n        \\n    def get_query_hash(self, query):\\n        # 生成标准化哈希\\n        normalized = ' '.join(sorted(self.normalize_query(query)))\\n        return hashlib.md5(normalized.encode()).hexdigest()\\n```",
      "verificationCriteria": "能正确处理各种查询格式，相似度计算结果合理，哈希生成稳定一致，支持中英文混合查询。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。"
    },
    {
      "id": "80e945cf-2716-4971-a4a0-2404a0b83bb7",
      "name": "基础置信度计算",
      "description": "实现简化版的置信度计算算法，基于确认和拒绝次数的线性模型。为用户反馈提供量化的信任度评估，支持置信度的动态更新。",
      "notes": "使用简化的线性模型，避免复杂的数学函数。重点是算法的可理解性和稳定性。",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "25bd6907-a4f1-496e-9cad-aeca0db9513c"
        }
      ],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:23:35.132Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加置信度计算",
          "lineStart": 1,
          "lineEnd": 60
        }
      ],
      "implementationGuide": "实现 ConfidenceCalculator 类：\\n\\n```python\\nclass ConfidenceCalculator:\\n    def __init__(self, config_manager):\\n        self.positive_weight = config_manager.get('positive_weight', 0.2)\\n        self.negative_weight = config_manager.get('negative_weight', 0.5)\\n        \\n    def calculate_confidence(self, confirmation_count, rejection_count):\\n        # 简化的线性模型\\n        positive_score = confirmation_count * self.positive_weight\\n        negative_score = rejection_count * self.negative_weight\\n        \\n        # 避免负数，使用简单的归一化\\n        raw_score = positive_score - negative_score\\n        confidence = max(0.0, min(1.0, raw_score / (positive_score + negative_score + 1)))\\n        return confidence\\n        \\n    def update_feedback(self, query_hash, command, confirmed):\\n        # 更新反馈记录和置信度\\n        cache_entry = self.cache_manager.get_cache_by_hash(query_hash)\\n        if cache_entry:\\n            if confirmed:\\n                cache_entry['confirmation_count'] += 1\\n            else:\\n                cache_entry['rejection_count'] += 1\\n            \\n            new_confidence = self.calculate_confidence(\\n                cache_entry['confirmation_count'],\\n                cache_entry['rejection_count']\\n            )\\n            self.cache_manager.update_confidence(cache_entry['id'], new_confidence)\\n```",
      "verificationCriteria": "置信度计算结果在0-1范围内，多次确认能提升置信度，拒绝能降低置信度，计算过程稳定可靠。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。"
    },
    {
      "id": "1b1d837f-d2cb-49c2-92e9-661c8e3f2b99",
      "name": "用户交互界面",
      "description": "实现用户确认界面，支持 Y/N 确认、超时处理、异常中断等情况。设计简洁友好的交互流程，确保不会阻塞用户的正常工作流程。",
      "notes": "用户体验是关键，要确保交互简洁明了。超时和异常处理要合理，不能让用户卡住。",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:23:35.132Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "添加用户交互函数",
          "lineStart": 1,
          "lineEnd": 40
        }
      ],
      "implementationGuide": "实现用户交互函数：\\n\\n```python\\ndef prompt_user_confirmation(command, source='API', timeout=30):\\n    \\\"\\\"\\\"用户确认界面\\\"\\\"\\\"\\n    print(f'> {command}  [{source}]')\\n    \\n    try:\\n        # 设置输入超时\\n        import signal\\n        \\n        def timeout_handler(signum, frame):\\n            raise TimeoutError()\\n            \\n        signal.signal(signal.SIGALRM, timeout_handler)\\n        signal.alarm(timeout)\\n        \\n        response = input('Copy to clipboard? [Y/n]: ').strip().lower()\\n        signal.alarm(0)  # 取消超时\\n        \\n        return response in ['', 'y', 'yes', '是']\\n        \\n    except (KeyboardInterrupt, EOFError):\\n        print('\\\\n✗ Cancelled')\\n        return False\\n    except TimeoutError:\\n        print('\\\\n⏰ Timeout, using default (Yes)')\\n        return True\\n    except Exception as e:\\n        print(f'\\\\n❌ Input error: {e}')\\n        return True  # 默认确认\\n```\\n\\n重点：各种异常情况都要有合理的处理。",
      "verificationCriteria": "各种用户输入都能正确处理，超时机制正常工作，异常中断不会导致程序崩溃，交互界面清晰友好。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。"
    },
    {
      "id": "e0d603a8-5892-4687-b351-1ddf97eed42d",
      "name": "主流程集成",
      "description": "修改现有的 get_shell_command 和 main 函数，集成缓存检查、置信度判断、用户交互等新功能。确保新功能与原有流程无缝结合，保持向后兼容性。",
      "notes": "这是最复杂的集成任务，需要仔细处理各种边界情况。确保任何异常都不会影响原有功能。",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "8181ccbd-c3a7-42fc-89ef-5138ce0de0a2"
        },
        {
          "taskId": "25bd6907-a4f1-496e-9cad-aeca0db9513c"
        },
        {
          "taskId": "34994ad8-357f-4fd4-84ec-1b7b1cd765b8"
        },
        {
          "taskId": "80e945cf-2716-4971-a4a0-2404a0b83bb7"
        },
        {
          "taskId": "1b1d837f-d2cb-49c2-92e9-661c8e3f2b99"
        },
        {
          "taskId": "9db98845-47c1-4ef7-954b-d4cf3ff9d39f"
        }
      ],
      "createdAt": "2025-07-31T18:23:35.132Z",
      "updatedAt": "2025-07-31T18:23:35.132Z",
      "relatedFiles": [
        {
          "path": "ai.py",
          "type": "TO_MODIFY",
          "description": "修改主流程函数",
          "lineStart": 8,
          "lineEnd": 50
        }
      ],
      "implementationGuide": "修改主流程函数：\\n\\n```python\\ndef enhanced_get_shell_command(prompt, force_api=False):\\n    # 1. 检查交互模式配置\\n    config = ConfigManager()\\n    if not config.get('interactive_mode') or force_api:\\n        return original_get_shell_command(prompt)\\n    \\n    # 2. 初始化管理器\\n    cache_manager = CacheManager(config)\\n    confidence_calc = ConfidenceCalculator(config)\\n    query_matcher = QueryMatcher()\\n    \\n    try:\\n        # 3. 查找缓存\\n        query_hash = query_matcher.get_query_hash(prompt)\\n        cached_result = cache_manager.find_exact_match(query_hash)\\n        \\n        # 4. 判断是否使用缓存\\n        if cached_result:\\n            confidence = confidence_calc.calculate_confidence(\\n                cached_result['confirmation_count'],\\n                cached_result['rejection_count']\\n            )\\n            \\n            if confidence >= config.get('auto_copy_threshold'):\\n                # 高置信度：直接复制\\n                pyperclip.copy(cached_result['command'])\\n                print(f\\\"> {cached_result['command']}  [cached]\\\\n✓ Copied to clipboard\\\")\\n                return cached_result['command']\\n            elif confidence >= config.get('confidence_threshold'):\\n                # 中等置信度：询问用户\\n                command = cached_result['command']\\n                source = f\\\"cached (confidence: {confidence:.2f})\\\"\\n            else:\\n                # 低置信度：调用API\\n                command = call_openrouter_api(prompt)\\n                source = \\\"API\\\"\\n        else:\\n            # 无缓存：调用API\\n            command = call_openrouter_api(prompt)\\n            source = \\\"API\\\"\\n        \\n        # 5. 用户确认\\n        confirmed = prompt_user_confirmation(command, source)\\n        \\n        if confirmed:\\n            pyperclip.copy(command)\\n            print(\\\"✓ Copied to clipboard\\\")\\n        \\n        # 6. 更新置信度\\n        confidence_calc.update_feedback(query_hash, command, confirmed)\\n        \\n        return command\\n        \\n    except Exception as e:\\n        # 降级到原有功能\\n        print(f\\\"Cache error, using API: {e}\\\")\\n        return original_get_shell_command(prompt)\\n```",
      "verificationCriteria": "新功能与原有功能无缝集成，配置关闭时行为完全不变，各种异常情况都有合理处理，用户体验流畅自然。",
      "analysisResult": "基于用户创新的\"复制确认反馈机制\"，为 aicmd v0.2.0 构建智能缓存系统。采用配置驱动的交互模式，通过用户的复制确认行为收集反馈，建立渐进式置信度模型。核心原则：保持向后兼容、质量优先、风险可控、增量交付。"
    }
  ]
}